<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        ">

    <!--
        需要导入aop的命名空间 xmlns:aop="http://www.springframework.org/schema/aop"
    -->

    <!-- 配置目标类 -->
    <bean id="userService" class="com.example.service.impl.UserServiceImpl"/>
    <!-- 配置切面类 -->
    <bean id="loggerAspect" class="com.example.aspect.LoggerAspect"/>

    <!-- aop配置 -->
    <aop:config>
        <!-- 配置通用的切点表达式，声明哪些方法需要被增强 -->
        <aop:pointcut id="userServiceLoginPointCut"
                      expression="execution(public void com.example.service.impl.UserServiceImpl.login(String, String))"/>

        <aop:pointcut id="userServiceCheckAccountPointCut"
                      expression="execution(public void com.example.service.impl.UserServiceImpl.checkAccount(String))"/>

        <!-- 配置织入，目的是组合切点和通知 -->
        <aop:aspect ref="loggerAspect">
            <!-- 配置前置通知 -->
            <aop:before method="beforeAdvice"
                        pointcut="execution(public void com.example.service.impl.UserServiceImpl.login(String, String))"/>
            <!-- 配置返回通知 -->
            <aop:after-returning method="afterReturningAdvice" pointcut-ref="userServiceLoginPointCut"/>
            <!-- 配置后置通知 -->
            <aop:after method="afterAdvice" pointcut-ref="userServiceLoginPointCut"/>
        </aop:aspect>

        <aop:aspect ref="loggerAspect">
            <!-- 配置前置通知 -->
            <aop:before method="beforeAdvice"
                        pointcut-ref="userServiceCheckAccountPointCut"/>
            <!-- 配置返回通知 -->
            <aop:after-returning method="afterReturningAdvice" pointcut-ref="userServiceCheckAccountPointCut"/>
            <!-- 配置异常通知 -->
            <aop:after-throwing method="afterThrowingAdvice" pointcut-ref="userServiceCheckAccountPointCut" throwing="throwable"/>
            <!-- 配置后置通知 -->
            <aop:after method="afterAdvice" pointcut-ref="userServiceCheckAccountPointCut"/>
        </aop:aspect>

        <aop:aspect ref="loggerAspect">
            <!-- 配置环绕通知 -->
            <aop:around method="aroundAdvice"
                        pointcut="execution(public void com.example.service.impl.UserServiceImpl.show())"/>
        </aop:aspect>

    </aop:config>

</beans>