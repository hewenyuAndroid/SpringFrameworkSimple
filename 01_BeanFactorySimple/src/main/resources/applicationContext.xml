<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 配置 spring bean 对象和依赖关系 -->
    <bean name="userService" class="com.example.service.impl.UserServiceImpl">
        <!--
            注入 userDao 对象，
            name="userDao" 表示名为 userDao 的 spring bean
            ref="userDao" 表示向 userService 对象中注入名为 userDao 的属性，即调用 serUserDao() 函数注入对象
        -->
        <property name="userDao" ref="userDao"/>
    </bean>

    <bean id="userDao" name="abc" class="com.example.dao.UserDao"/>

    <!-- 无参构造方式创建 bean -->
    <bean id="bookDao" class="com.example.dao.BookDao"/>

    <!-- 有参构造方式创建 bean -->
    <bean id="bookDaoWithName" class="com.example.dao.BookDao">
        <!-- 配置构造函数中 name 参数 -->
        <constructor-arg name="name" value="Thinking in java"/>
    </bean>

    <!-- 配置 BookDao bean 实例的获取方式，通过 静态工厂方法 调用无参构造方式，实例化 BookDao-->
    <bean id="bookDaoWithStatic" class="com.example.factory.BookDaoFactoryBean" factory-method="getBookDaoWithStatic"/>

    <!-- 配置 BookDao bean 实例的获取方式，通过 静态工厂方法 调用有参构造方式，实例化 BookDao-->
    <bean id="bookDaoWithStaticName" class="com.example.factory.BookDaoFactoryBean" factory-method="getBookDaoWithStatic">
        <constructor-arg name="name" value="Think in java"/>
    </bean>

    <!-- 配置工厂bean实例 -->
    <bean id="bookDaoFactoryBean" class="com.example.factory.BookDaoFactoryBean"/>

    <!-- 配置 BookDao bean 实例的获取方式，通过 非静态工厂方法 调用无参构造方式，实例化 BookBean -->
    <bean id="bookDaoFactory" factory-bean="bookDaoFactoryBean" factory-method="getBookDao"/>

    <!-- 配置 BookDao bean 实例的获取方式，通过 非静态工厂方法 调用有参构造方式，实例化 BookBean -->
    <bean id="bookDaoFactoryWithName" factory-bean="bookDaoFactoryBean" factory-method="getBookDao">
        <constructor-arg name="name" value="Java"/>
    </bean>

    <!-- 配置 spring FactoryBean 接口方式创建 bean 实例 -->
    <bean id="bookDaoFactoryBeanImpl" class="com.example.factory.BookDaoFactoryBeanImpl"/>

    <!-- 依赖注入 -->
    <bean id="bookService" class="com.example.service.impl.BookService">
        <!-- 注入 List<String> 类型数据 -->
        <property name="bookNameList">
            <list>
                <value>Java</value>
                <value>Kotlin</value>
            </list>
        </property>
        <!-- 注入 List<BookDao> 类型数据 -->
        <property name="bookDaoList">
            <list>
                <ref bean="bookDao"/>
                <ref bean="bookDaoWithName"/>
            </list>
        </property>
        <!-- 注入 Map<String, BookDao> 类型数据 -->
        <property name="bookDaoMap">
            <map>
                <entry key="book1" value-ref="bookDao"/>
                <entry key="book2" value-ref="bookDaoWithStatic"/>
            </map>
        </property>
        <!-- 注入 Properties 类型数据 -->
        <property name="bookDaoProperties">
            <props>
                <prop key="book1">value1</prop>
                <prop key="book2">value2</prop>
            </props>
        </property>
    </bean>

    <bean id="empDao" class="com.example.dao.EmpDao"/>
    <!--
        配置 EmpService 自动装配，spring 会自动为其内部注入bean属性
        byType: 根据类型匹配IOC容器中的某个兼容类型的 bean，为属性自动赋值
        byName: 根据bean的名称进行主动装配，spring 容器会在容器中查找与目标bean属性名称相同的 bean，并将其注入到目标 bean 中。
        constructor: 通过构造函数进行自动装配，spring 容器会根据构造函数的参数类型，在容器中查找匹配的 bean，将其作为构造函数的参数注入。
    -->
    <bean id="empService" class="com.example.service.impl.EmpService" autowire="byType"/>

</beans>